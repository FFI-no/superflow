# This file is autogenerated at the call of `make` or `make install` of superflow.
# Use it when you want to `find_package(superflow CONFIG)`.
#
# This file will set the following variables for you to use:
# superflow_FOUND
# superflow_VERSION
# superflow_LIBS
# superflow_LIBRARIES
#
# For each module that was enabled at the call of `make install`, a variable
# superflow_<module>_FOUND will be set to TRUE, so that you may use
# find_package(superflow COMPONENTS <module1> <module2>).
#
# If COMPONENTS is specified,
#   superflow_LIBS will be a list of the targets corresponding to the requested components.
# Else,
#   superflow_LIBS will be a list of all compiled superflow targets.
# In any case,
#   superflow::core will be included in superflow_LIBS.
#
# superflow_LIBRARIES is exactly the same as superflow_LIBS.
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

@PACKAGE_INIT@
include("${CMAKE_CURRENT_LIST_DIR}/superflow-targets.cmake")

message(STATUS "* Loading @PROJECT_NAME@ v${@PROJECT_NAME@_VERSION}: " "${CMAKE_CURRENT_LIST_FILE}")

list(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_LIST_DIR})
include(CMakeFindDependencyMacro)

if(superflow_FIND_COMPONENTS)
  set(requested_components core;${superflow_FIND_COMPONENTS})
  #string(REGEX REPLACE "([a-z]+)(;|$)" "superflow-\\1\\2" requested_components "${requested_components}")
else()
  set(requested_components @built_components@)
  string(REGEX REPLACE "superflow-([a-z]+)(;|$)" "\\1\\2" requested_components "${requested_components}")
endif()
list(REMOVE_DUPLICATES requested_components)

string(REPLACE ";" " " spaced_components "${requested_components}")
message(STATUS "* Requested superflow components: ${spaced_components}")

foreach(comp IN LISTS requested_components)
  find_dependency(superflow-${comp})
  list(APPEND superflow_LIBS "superflow::${comp}")
endforeach()

set(superflow_LIBRARIES ${superflow_LIBS})

check_required_components(superflow)
message(STATUS "* Found @PROJECT_NAME@ v${@PROJECT_NAME@_VERSION} ${spaced_components}")
